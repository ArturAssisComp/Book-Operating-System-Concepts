Book: Operating System Concepts
Chapter 2: Operating-System Structures

Question 3.18 - Write a C program that forks a child process that ultimately becomes 
a zombie process (defunct process of which parent did not have called wait). This combie 
process must remain in the system for at least 10 seconds.

Question 3.19 - Write a C program that determines the amount of time necessary to run a 
command from the command line. This program will run "./program_name <command>" and
will report the amount of elapsed time to run the specific command. This will involve 
using fork(), exec(), and gettimeofday() functions. It will also require the use of
two different IPC mechanisms.

Question 3.20 - Create a pid manager. The following constants must be used to identify
the range of possible pid values: MIN_PID and MAX_PID and they must be defined as 
macros. Moreover, the following API must be implemented:
(1) - int allocate_map(void) --> Create and initializes a data structure for representing
                                 pids; returns -1 if unsuccessful, 1 if successful.
(2) - int allocate_pid(void) --> Allocates and resutns a pid; returns -1 if unable to 
                                 allocate a pid (all pids are in use);
(3) - void release_pid(int pid) --> releases a pid;

Question 3.21 - Write a C program using fork() system call that generates the Collatz
sequence in the child process. The child will print the sequence.

Question 3.22 - Repeat 3.21 but using shared memory. The parent must print the result 
after the child returning it.

Question 3.23 - Modify the date server shown in Figure 3.27 so that it delivers a quote
of the day rather than the current date. The date client shown in Figure 3.28 can be used
to read the quotes returned by the server.

Question 3.25 - Create an Echo server/client.

Question 3.26 - Design a program using ordinary pipes in which one process sends 
a string message to a second process, and the second process reverses the case 
of each character in the message and sends it back to the first process.
